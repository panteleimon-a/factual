FRONTEND INSTRUCTIONS
1. Download and install node.js 20.9.0 LTS source: https://nodejs.org/en .
2. Verify install: type in terminal node -v (should return current installed version of node.js) then type npm -v (should return current installed version of node.js).
3. On terminal use cd command to navigate to project file (factual) and type code . (code and . is one command) to open project in visual studio code.
4. From terminal or vs code console (make sure you are in the right directory) type npm install.
5. Finally type npm start.
6. After npm start a browser window should automaticly open in page http://localhost:3000 if not open the page manually.
7. Remember that django server should also run so you can perform requests form the search bar.
8. Background use tsparticles library which has a free license, if that is a problem contact me.

BACKEND INSTRUCTION

1. I believe that i have modified only settings.py, nevertheless all lines added by me have a comment next to them like #giorgos_ster
2. It is possible that if you try to run the frontened and perform a request from search bar that django will give an error.
3. In that case you have to installed the corsheaderspackage with pip install django-cors-headers and include 'corsheaders' in the INSTALLED_APPS in settings.py
4. Also include this to lines of code in MIDDLEWARE in settings.py

	'corsheaders.middleware.CorsMiddleware',
   	'django.middleware.common.CommonMiddleware',

5. Add to settings.py this lines 
	CORS_ALLOWED_ORIGINS = [
    		"http://localhost:3000",  # Replace with the origin of your frontend application, but this should work
	]

6. Finally, a good step would be to apply migratons by running python manage.py migrate
7. Note that this settings should be revisited before deployment.

Here is a summury for what this package do by chatGPT


`django-cors-headers is a Django application for handling Cross-Origin Resource Sharing (CORS) headers. CORS is a security feature implemented by web browsers that restricts web pages from making requests to a different domain than the one that served the web page. This security measure helps prevent various types of cross-site request forgery attacks.

When you're building a web application with Django serving the backend and a separate frontend, especially if the frontend is hosted on a different domain, you may encounter CORS issues. These issues manifest when your frontend tries to make AJAX requests to your Django backend, and the browser blocks the requests due to the same-origin policy.

django-cors-headers provides a middleware that adds the necessary CORS headers to HTTP responses from your Django application. These headers inform the browser that it's acceptable for the frontend to make requests to your backend from a different origin.

Key features and functionalities of django-cors-headers include:

    Handling CORS Headers:
        Automatically adds the necessary CORS headers to Django responses.

    Configuration Options:
        Allows you to configure which origins are allowed (CORS_ALLOWED_ORIGINS).
        Provides various configuration options to control the behavior of CORS headers.

    Exposing Headers:
        Supports exposing additional headers to the browser, such as custom headers that your frontend might use.

    Handling Credentials:
        Provides options for handling credentials (e.g., cookies, HTTP authentication) during CORS requests.

    Handling Preflight Requests:
        Handles preflight requests by automatically responding to OPTIONS requests with appropriate headers.

Here's a brief explanation of some key concepts related to CORS:

    Origin: An origin is a combination of protocol, domain, and port. For example, http://localhost:3000 is an origin.

    Preflight Request: Certain types of requests (e.g., those with custom headers or methods) trigger a preflight request. The preflight request is an HTTP OPTIONS request that checks whether the actual request is safe to send.

    CORS Headers: These headers include Access-Control-Allow-Origin, Access-Control-Allow-Methods, Access-Control-Allow-Headers, etc., and are crucial for instructing the browser on which cross-origin requests are allowed.

By using django-cors-headers, you can ensure that your Django backend and your frontend can communicate properly without being hindered by CORS restrictions imposed by web browsers. It simplifies the process of handling CORS-related issues in your Django application.